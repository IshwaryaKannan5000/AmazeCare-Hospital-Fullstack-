using AmazeCare.Interfaces;
using AmazeCare.Misc;
using AmazeCare.Models.DTOs;
using AmazeCare.Models;
using System.Reflection.Emit;
using AmazeCare.Exceptions;
using AmazeCare.Repositories;

namespace AmazeCare.Service
{
    public class AdminService : IAdminService
    {
        private readonly IUserRepository _userRepository;
        private readonly IPatientRepository _patientRepository;
        private readonly IDoctorRepository _doctorRepository;
        private readonly IAppointmentRepository _appointmentRepository;
       

        public AdminService(
            IUserRepository userRepository,
            IPatientRepository patientRepository,
             IDoctorRepository doctorRepository,
             IAppointmentRepository appointmentRepository)
        {
            _userRepository = userRepository;
            _patientRepository = patientRepository;
            _doctorRepository = doctorRepository;
            _appointmentRepository = appointmentRepository;

        }

        public async Task<AdminPatientResponseDto> AddPatientAsync(PatientDto patientDto)
        {
            // Create User entity (ID will be auto-generated by DB)
            string hashedPassword = BCrypt.Net.BCrypt.HashPassword(patientDto.Password);
            var user = new User
            {
                FullName = patientDto.FullName,
                Email = patientDto.Email,
                Password = hashedPassword,
                ContactNo = patientDto.ContactNo,
                Gender = patientDto.Gender,
                DateOfBirth = patientDto.DateOfBirth,
                RoleId = 1, // patient role
                RoleName = "patient"
            };

            var createdUser = await _userRepository.AddUser(user); // returns user with generated UserId

            // Create Patient entity using only UserId (do NOT assign navigation property)
            var patient = new Patient
            {
                UserId = createdUser.UserId,
               
            };

            var createdPatient = await _patientRepository.Add(patient);

            return new AdminPatientResponseDto
            {
                PatientId = createdPatient.PatientId,
                UserId = createdUser.UserId,
                MedicalHistory = createdPatient.MedicalHistory
            };
        }


        public async Task<bool> UpdatePatientAsync(UpdatePatientDto dto)
        {
            if (dto == null)
                throw new ArgumentNullException(nameof(dto), "Update data cannot be null.");

            var user = await _userRepository.GetUserById(dto.UserId)
                       ?? throw new UserNotFoundException($"User with ID {dto.UserId} not found");


            var patient = await _patientRepository.GetByUserId(dto.UserId)
                         ?? throw new PatientNotFoundException();

            // Update only if new values are provided
            if (dto.FullNameUpdate != null && !string.IsNullOrWhiteSpace(dto.FullNameUpdate.NewFullName))
                user.FullName = dto.FullNameUpdate.NewFullName;

            if (dto.ContactNoUpdate != null && !string.IsNullOrWhiteSpace(dto.ContactNoUpdate.NewContactNo))
                user.ContactNo = dto.ContactNoUpdate.NewContactNo;

            if (dto.GenderUpdate != null && !string.IsNullOrWhiteSpace(dto.GenderUpdate.NewGender))
                user.Gender = dto.GenderUpdate.NewGender;

            if (dto.DateOfBirthUpdate != null)
                user.DateOfBirth = dto.DateOfBirthUpdate.NewDateOfBirth;

            if (dto.MedicalHistoryUpdate != null && !string.IsNullOrWhiteSpace(dto.MedicalHistoryUpdate.NewMedicalHistory))
                patient.MedicalHistory = dto.MedicalHistoryUpdate.NewMedicalHistory;

            await _userRepository.UpdateUser(user);
            await _patientRepository.Update(patient);

            return true;
        }


        public async Task<bool> DeletePatientAsync(int userId)
        {
            var patient = await _patientRepository.GetByUserId(userId);
            if (patient == null)
                throw new Exception("Patient not found");

            await _patientRepository.Delete(patient.PatientId);
            return await _userRepository.DeleteUser(userId);
        }


        // --- Add Doctor ---
        public async Task<AdminDoctorResponseDto> AddDoctorAsync(DoctorDto dto)
        {
            string hashedPassword = BCrypt.Net.BCrypt.HashPassword(dto.Password);
            var user = new User
            {
                FullName = dto.FullName,
                Email = dto.Email,
                Password = hashedPassword,
                ContactNo = dto.ContactNo,
                Gender = dto.Gender,
                DateOfBirth = dto.DateOfBirth,
                RoleId = 3,
                RoleName = "doctor"
            };
            

            var createdUser = await _userRepository.AddUser(user);

            var doctor = new Doctor
            {
                UserId = createdUser.UserId,
                SpecialtyId = dto.SpecialtyId,
                Designation = dto.Designation,
                Experience = dto.Experience,
                Qualification = dto.Qualification
            };

            var createdDoctor = await _doctorRepository.Add(doctor);

            return new AdminDoctorResponseDto
            {
                DoctorId = createdDoctor.DoctorId,
                UserId = createdUser.UserId,
                Designation = createdDoctor.Designation
            };
        }

        // --- Update Doctor ---
        public async Task<bool> UpdateDoctorAsync(UpdateDoctorDto dto)
        {
            // Retrieve the user and doctor
            var user = await _userRepository.GetUserById(dto.UserId)
                ?? throw new UserNotFoundException("User not found");

            var doctor = await _doctorRepository.GetByUserId(dto.UserId)
                ?? throw new Exception("Doctor not found");

            // Only update if the new value is provided (non-empty and valid)
            if (!string.IsNullOrEmpty(dto.NewFullName))  // Check if new name is provided
                user.FullName = dto.NewFullName;

            if (!string.IsNullOrEmpty(dto.NewContactNo))  // Check if new contact number is provided
                user.ContactNo = dto.NewContactNo;

            if (!string.IsNullOrEmpty(dto.NewGender))  // Check if new gender is provided
                user.Gender = dto.NewGender;

            // Only update date of birth if provided (and valid)
            if (dto.NewDateOfBirth.HasValue)
                user.DateOfBirth = dto.NewDateOfBirth.Value;

            // Only update the doctor's designation and qualification if provided
            if (!string.IsNullOrEmpty(dto.NewDesignation))
                doctor.Designation = dto.NewDesignation;

            if (!string.IsNullOrEmpty(dto.NewQualification))
                doctor.Qualification = dto.NewQualification;

            // Only update experience if a valid value is provided
            if (dto.NewExperience.HasValue)  // Check if experience is provided
                doctor.Experience = dto.NewExperience.Value;

            // Update the user and doctor data in the repositories
            await _userRepository.UpdateUser(user);
            await _doctorRepository.Update(doctor);

            return true;
        }

        // --- Delete Doctor ---
        public async Task<bool> DeleteDoctorAsync(int userId)
        {
            var doctor = await _doctorRepository.GetByUserId(userId);
            if (doctor == null)
                throw new Exception("Doctor not found");

            var user = await _userRepository.GetById(userId);
            if (user == null)
                throw new Exception("User not found");

            // Set role to inactive instead of deleting
            user.RoleName = "inactive";
            await _userRepository.UpdateUser(user);

            return true;
        }


        public async Task<bool> RescheduleAppointmentAsync(int appointmentId, DateTime newDate)
        {
            var appointment = await _appointmentRepository.GetAppointmentByIdAsync(appointmentId);
            if (appointment == null)
                throw new Exception("Appointment not found");

            appointment.AppointmentDate = newDate;
            await _appointmentRepository.UpdateAppointmentAsync(appointment);

            return true; // Indicating success
        }


        // Cancel Appointment
        public async Task<bool> CancelAppointmentAsync(int appointmentId)
        {
            var appointment = await _appointmentRepository.GetAppointmentByIdAsync(appointmentId);
            if (appointment == null)
                throw new Exception("Appointment not found");

            return await _appointmentRepository.DeleteAppointmentAsync(appointmentId);
        }
    }

}
